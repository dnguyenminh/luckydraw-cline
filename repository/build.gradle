buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.4'
        classpath 'org.flywaydb:flyway-gradle-plugin:9.16.0'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.flywaydb.flyway'

group = 'vn.com.fecredit'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:3.2.2'
    }
}

configurations {
    compileClasspath {
        configurations.implementation.setCanBeResolved(true)
    }
}

dependencies {
    api project(":entity")
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'org.hibernate.validator:hibernate-validator'
    api 'jakarta.validation:jakarta.validation-api'
    api 'org.glassfish:jakarta.el:4.0.2'

    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    compileOnly "org.projectlombok:lombok:1.18.30"
    annotationProcessor "org.projectlombok:lombok:1.18.30"

    testCompileOnly "org.projectlombok:lombok:1.18.30"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.30"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    enabled = true
    manifest {
        attributes([
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Automatic-Module-Name': "vn.com.fecredit.app.repository"
        ])
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    
    // Include all sources
    from sourceSets.main.output
}

//bootJar {
//    enabled = false
//}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            // Add extra artifacts if needed
            artifact(sourcesJar)
            artifact(javadocJar)
        }
    }

    repositories {
        mavenLocal()
    }
}

// Ensure repository classes are properly exposed
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

flyway {
    String profile = System.getProperty('spring.profiles.active', 'unknown')
    String prefixDBName = profile == "" ? "" : "${profile}_"
    String dbName = "${prefixDBName}lucky_draw"
    url = "jdbc:postgresql://localhost:5432/${dbName}"
    user = 'postgres'
    password = 'postgres'
    schemas = ['public']
    cleanDisabled = (project.findProperty('flyway.cleanDisabled') ?: 'false').toBoolean()
    baselineOnMigrate = true
}
