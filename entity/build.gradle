plugins {
    id 'java-library'
    id 'org.springframework.boot' apply false
    id 'io.spring.dependency-management'
}

group = 'vn.com.fecredit'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'org.hibernate.validator:hibernate-validator'
    api 'jakarta.validation:jakarta.validation-api'
    api 'org.glassfish:jakarta.el:4.0.2'
    api 'org.springframework.security:spring-security-core'

    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    implementation("org.projectlombok:lombok:1.18.30")
    annotationProcessor("org.projectlombok:lombok:1.18.30")

    testImplementation("org.projectlombok:lombok:1.18.30")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.30")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    enabled = true
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Automatic-Module-Name': "vn.com.fecredit.app.entity",
            'Spring-Boot-Jar-Type': 'library',
            'Spring-Boot-Classes': 'BOOT-INF/classes/',
            'Spring-Boot-Lib': 'BOOT-INF/lib/'
        )
    }
    from sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // Make packages visible to dependent projects
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//bootJar {
//    enabled = false
//}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
